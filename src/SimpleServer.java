/**
 * Java. Level 2. Lesson 7
 * Simple server for chat (Простой сервер для чата)
 *
 * @author Sergey Iryupin
 * @version 0.2 dated Jan 16, 2018
 * Rus comments by Dmitriy Grishin
 */

import java.io.*;
import java.net.*;
import java.sql.*;
//import java.util.ArrayList; //модернизация

public class SimpleServer implements IConstants{
    //константы берутся из интерфейса IConstants

    public static void main(String[] args) {
        new SimpleServer();
    }

    SimpleServer() {
        int clientCount = 0;//счётчик клиентов
        System.out.println(SERVER_START);//сообщение в консоль, что клиент подключился
        //В ресурсах try() создаём сокет сервера (ServerSocket is AutoCloseable) (на вебинаре был обычный try)
        try (ServerSocket server = new ServerSocket(SERVER_PORT)) {
            //бесконечный цикл создания нитей обработки новых клиентов
            while (true) {
                Socket socket = server.accept();//ожидание подключения клиента и получения ссылки на клиентский сокет
                System.out.println("#" + (++clientCount) + CLIENT_JOINED);//сообщение в консоль сервера, какой клиент подключился
                new Thread(new ClientHandler(socket, clientCount)).start();//создаём объект обработки отдельного клиента
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        System.out.println(SERVER_STOP);
    }

    //Метод проверки авторизации клиента:
    /**
     * checkAuthentication: check login and password
     * Параметры:
     * @param  login for checking
     * @param  passwd for checking
     * Возвращает boolean в зависимости от успешности авторизации
     * @return if the pair login/passwd is found in the database,
     *         authentication is successful
     */
    private boolean checkAuthentication(String login, String passwd) {
        boolean result = false;
        try {
            // loads a class, including running its static initializers (загружаем класс драйвера)
            Class.forName(DRIVER_NAME);
            // connect db (соединяемся с БД)
            Connection connect = DriverManager.getConnection(SQLITE_DB);
            // looking for login && passwd in db (поиск соответствия в БД)
            PreparedStatement pstmt = connect.prepareStatement(SQL_SELECT);//SQL_SELECT = "SELECT * FROM users WHERE login=?"
            // replace "?" to the login (замена "?" на "login", переданный в метод checkAuthentication в качестве параметра)
            pstmt.setString(1, login);
            // returns ResultSet object generated by the query
            ResultSet rs = pstmt.executeQuery();
            // process rows from the query result
            while (rs.next())
                //Получить строку колонки PASSWD_COL и проверить на равенство значению "passwd",
                //переданному в метод checkAuthentication в качестве параметра:
                result = rs.getString(PASSWD_COL).equals(passwd);
            // close all
            rs.close();
            pstmt.close();
            connect.close();
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
            return false;
        }
        return result;
    }

    /**
     * ClientHandler: (ВНУТРЕННИЙ класс для нити обработки отдельного клиента)
     */
    class ClientHandler implements Runnable {
        BufferedReader reader;
        public PrintWriter writer;
        Socket socket;//для запоминания клиентского сокета
        String name;//имя подключённого клиента

        //В конструктор передаём параметры - ссылку на клиентский сокет и номер клиента
        ClientHandler(Socket clientSocket, int clientCount) {
            try {
                socket = clientSocket;
                reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));//читатель входящего потока
                writer = new PrintWriter(socket.getOutputStream());//писатель исходящего потока
                name = "Client #" + clientCount;//задаём имя клиенту

            } catch(Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

        @Override
        public void run() {
            String message;
            try {
                do {
                    message = reader.readLine();//читаем сообщение от клиента
                    if (message != null) {
                        System.out.println(name + ": " + message);//выводим его в консоль

                        //Если сообщение начинается с АУТЕНТИФИКАЦИОННОГО слова:
                        if (message.startsWith(AUTH_SIGN)) {
                            String[] wds = message.split(" ");//делим сообщение на 3 части
                            //применяем метод проверки авторизации:
                            if(checkAuthentication(wds[1],wds[2])) {
                                name = wds[1];//даём имя клиенту по логину
                                writer.println("Hello, " + name);
                                writer.println("\0");//пустой символ для печати символа-подсказки у клиента
                            } else {
                                System.out.println(name + ": " + AUTH_FAIL);//"Authentication failure." - отказ в аутентификации в консоль
                                writer.println(AUTH_FAIL);//Отправка этого же сообщения клиенту
                                message = EXIT_COMMAND;//присваиваем значение exit, чтобы корректно выйти из нити этого клиента
                            }
                        //Иначе если ДРУГОЕ сообщение и оно не команда exit:
                        } else if (!message.equalsIgnoreCase(EXIT_COMMAND)) {
                            writer.println("echo: " + message);//отправляем клиенту обратно (эхо)
                            writer.println("\0");//пустой символ для печати символа-подсказки у клиента
                        }
                        writer.flush();//для гарантированной отправки содержимого буфера исходящего потока
                    }
                } while (!message.equalsIgnoreCase(EXIT_COMMAND));//пока сообщение не равно команде exit

                socket.close();//закрытие клиентского сокета
                System.out.println(name + CLIENT_DISCONNECTED);
            } catch(Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }
}
